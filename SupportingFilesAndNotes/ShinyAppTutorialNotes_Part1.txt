SHINY APPLICATIONS TUTORIAL NOTES
Part 1 - "How to build a Shiny App"

I) Structure

________________                  __________________
|              |                  |                |
|              |   ----------->   |                |
| Web Page     |                  |Computer/Server |
|              |   <-----------   |                |
|              |                  |                |
________________                  __________________

- Computer serves the web page by running R scripts.
- When the web page is updated, the computer reruns the scripts to regenerate the graphs.
- Computer can easily be replaced by a web server.



II) Components to a Shiny App
- There are two main components:
	1. User Interface (UI): The web page users see and interact with. HTML gets generated by R.
	2. Server Instructions: Set of instructions written in R. Tells the server what to do when user changes parameters
				on the web page.



III) Shiny Template
			-------------------------------------
			|library(shiny)
	[UI Object]	|ui <- fluidPage()
			|
	[Serv Object]	|server <- function(input, ouput) {}
			|
	[Knitt Together]|shinyApp(ui = ui, server = server)
			-------------------------------------



IV) Inputs
- Inputs: Parameters the user can toggle on the UI.

- Add them in fluid page:
	--------------------------------------
	| ui <- fluidPage(
	|		#*Input() functions,
	|	)
	--------------------------------------

- Types of Input functions Shiny provides:
	1. Buttons:
		[actionButton()]
		[submitButton()]
	2. Single checkbox
		[checkboxInput()]
	3. Checkbox group
		[checkboxGroupInput()]
	4. Date input
		[dateInput()]
	5. Date range
		[dateRangeInput()]
	6. File input
		[fileInput()]
	7. Numeric input
		[numericInput()]
	8. Password Input
		[passwordInput()]
	9. Radio buttons
		[radioButtons()]
	10. Select box
		[selectInput()]
	11. Sliders
		[sliderInput()]
	12. Text input
		[textInput()]		*Reference typesOfInputs.png*

- Input Syntax:
	[ sliderInput(inputId = "num", label = "Choose a number", ...) ]
	
	- inputId (not ID): unique name for the input. Each input on the page should have it's own unique name.
			    This will get used later to identify the input.
	- label: Text written on the UI to explain to the user what that input object is for.
	- ...: input specific arguments. Arguments are different for each input. Use `?sliderInput` for information.
	       For slider input, an argument might be min and max numbers.

Example: sliderInput()
	-----------------------------------------------------------	
	| library(shiny)
	| ui <- fluidPage(
	|		sliderInput(inputId = "num",
	|			label = "Choose a number",
	|			value = 25, min = 1, max = 100)
	|	)
	|
	| server <- functions(input, output) {}
	|
	| shinyApp(ui = ui, server = server)
	-----------------------------------------------------------


V) Outputs
- Outputs: R objects that get updated and that the user sees.

- Add them in fluid page:
	--------------------------------------
	| ui <- fluidPage(
	|		#*Input() functions,
	|		#*Output() functions
	|	)
	--------------------------------------

- Types of Output functions Shiny provides:
	1. An interactive table:
		[dataTableOutput()]
	2. Raw HTML:
		[htmlOutput()]
	3. Image:
		[imageOutput()]
	4. Plot:
		[plotOutput()]
	5. Table:
		[tableOutput()]
	6. Text:
		[textOutput()]
	7. A Shiny UI element:
		[uiOutput()]
	8. Text:
		[verbatimTextOutput()]
	
- Output Syntax:
	[ plotOutput(outputId = "hist" ]

	- plot: type of output to display
	- outputId: one required argument to provide a unique name for the output (just like inputId).

Example: plotOutput()
	-----------------------------------------------------------	
	| library(shiny)
	| ui <- fluidPage(
	|		sliderInput(inputID = "num",
	|			label = "Choose a number",
	|			value = 25, min = 1, max = 100),	<= Don't forget comma to separate input and output.
	|		plotOutput("hist")
	|	)
	|
	| server <- functions(input, output) {}
	|
	| shinyApp(ui = ui, server = server)
	-----------------------------------------------------------

	Note: Nothing will display on the HTML web page. However this will allocate space on the page for the
	      object. The actual object (or plot) will have to be built inside the server object.



VI) Server
- Server function: This function assembles your inputs into the outputs.

	--------------------------------------
	| server <- function(input, output) {
	|
	| }
	--------------------------------------

- 3 rules to write a server function
	1. If you're building an output object, always save that object to `output$..`. Use the same name as inputId.
		[ output$hist <- #code ]
	2. What you save in the output, should be something you build with a render function.
		[ output$hist <- renderPlot({}) ]

		Render*() functions:
		- An interactive table:
			[renderDataTable()]
		- An image (saved as a link to a source file):
			[renderImage()]
		- A plot:
			[renderPlot()]
		- A code block of printed output:
			[renderPrint()]
		- A table (from a data frame, matrix, or other table-like structures):
			[renderTable()]
		- A character string:
			[renderText()]
		- A shiny UI element:
			[renderUI()]

		Example: renderPlot({ hist(rnorm(100)) }) - 
				renderPlot: Type of object to build
				hist(rnorm(100)): code block that builds the objects (in this case, builds 100 random normal numbers).

			-----------------------------------------------------
			| server <- function(input, output) {
			|	output$hist <- renderPlot({
			|		
			|		title <- "100 random normal values"
			|		hist(rnorm(100), main = title)
			|	})
			| }
			-----------------------------------------------------

	3. Use input values with input$ (once again, same name as the inputId). These value are always UP-TO-DATE as the user is changing
	   the inputs.

			------------------------------------------------------
			| server <- function(input, output) {
			|
			|	output$hist <- renderPlot({
			|		title <- "100 random normal values"
			|		hist(rnorm(input$num), main = title)
			|	})
			|
			| }
			------------------------------------------------------

















































